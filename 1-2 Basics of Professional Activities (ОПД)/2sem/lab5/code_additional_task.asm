ORG 0xA00

RUN:
    CLA
    CLC
    
    CALL WAIT_DEVICE_READY_9

    CLA

    CALL READ_CHARACTER
    CALL PARSE_CHARACTER
    ST TEMP_CHAR_KOI8
    CLA

    CALL WAIT_DEVICE_READY_5
    LD TEMP_CHAR_KOI8

    CALL CHECK_STOP_SIGN
    
    CALL WRITE_CHAR

    JUMP RUN

READ_CHARACTER:
    IN 1C
    RET

PARSE_CHARACTER:
    LD 0x0
    RET

CHECK_STOP_SIGN:
    PUSH
    CMP #0x30
    BEQ EXIT
    
    POP
    RET

WRITE_CHAR:
    
    OUT 0xC

    RET

WAIT_DEVICE_READY_9: ; Ожидание готовности ву-9
    IN 0x1D
    AND #0x40
    BEQ WAIT_DEVICE_READY_9
    RET

WAIT_DEVICE_READY_5: ; Ожидание готовности ву-9
    IN 0xD
    AND #0x40
    BEQ WAIT_DEVICE_READY_5
    RET
    
EXIT:
    HLT

TEMP_CHAR_KOI8: WORD 0x0000 ; Временное хранение символа КОИ-8
STOP_SIGN: WORD 0x0030 ; Стоп-символ

========

1. Чтение из клавы
это ноль? Да -- Записать все в строку
Нет -- читаем дальше

========

ORG 0x47B
START:
    LD START_ADDR
    ST CURRENT_ADDR

    LD #0
    CALL STORE_LOW
    JUMP EVEN_CHAR

ODD_CHAR:
    CALL READ_CHAR
    CALL STORE_LOW
    CMP STOP_CHAR
    BEQ ODD_CHAR_LOAD

EVEN_CHAR:
    CALL READ_CHAR
    CALL STORE_HIGH
    CMP STOP_CHAR
    BEQ ODD_CHAR_LOAD
    CALL ADJUST_CURRENT_ADDR
    JUMP ODD_CHAR

ODD_CHAR_LOAD:
    CALL LOAD_LOW
    CALL WRITE_CHAR
    CMP STOP_CHAR
    BEQ EXIT

EVEN_CHAR_LOAD:
    CALL LOAD_HIGH
    CALL WRITE_CHAR
    CMP STOP_CHAR
    BEQ EXIT
    CALL ADJUST_CURRENT_ADDR_VICE_VERSA
    JUMP ODD_CHAR_LOAD

ADJUST_CURRENT_ADDR:
    LD (CURRENT_ADDR)+
    RET

ADJUST_CURRENT_ADDR_VICE_VERSA:
    LD -(CURRENT_ADDR)
    RET


STORE_HIGH: ; Сохранить верхнюю часть
    SWAB
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_LOW
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

EXIT:
    HLT

STORE_LOW: ; Сохранить нижнюю часть 
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

READ_CHAR: ; returns AC 8 bit char segment
    CALL WAIT_DEVICE_READY_9
    CLA
    IN 0x1C
    RET

LOAD_HIGH:
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    SWAB
    RET

LOAD_LOW:
    LD (CURRENT_ADDR)
    AND MASK_LOW
    RET

WRITE_CHAR:
    CALL WAIT_DEVICE_READY_5
    CALL PARSE_CHAR
    OUT 0xC
    RET

PARSE_CHAR:
    HLT ; ПЕРЕДЕЛАТЬ

WAIT_DEVICE_READY_9:
    PUSH
NOT_READY_9:
    IN 0x1D
    AND #0x40
    BEQ NOT_READY_9
    POP
    RET

WAIT_DEVICE_READY_5:
    PUSH
NOT_READY_5:
    IN 0xD
    AND #0x40
    BEQ NOT_READY_5
    POP
    RET

START_ADDR: WORD 0x56A ; Адрес начала
CURRENT_ADDR: WORD ? ; Адрес текущей ячейки
STOP_CHAR: WORD 0x0000 ; Стоп-символ
MASK_HIGH: WORD 0xFF00
MASK_LOW: WORD 0x00FF

===============

ORG 0x47B
START:
    LD START_ADDR
    ST CURRENT_ADDR

    LD STOP_CHAR
    CALL STORE_LOW
    JUMP EVEN_CHAR

ODD_CHAR:
    CALL READ_CHAR
    CMP #10
    BGE ODD_CHAR
    CALL STORE_LOW
    CMP STOP_CHAR
    BEQ EVEN_CHAR_LOAD

EVEN_CHAR:
    CALL READ_CHAR
    CMP #10
    BGE EVEN_CHAR
    CALL STORE_HIGH
    CMP STOP_CHAR
    BEQ ODD_CHAR_LOAD
    CALL ADJUST_CURRENT_ADDR_INC
    JUMP ODD_CHAR

ODD_CHAR_LOAD:
    CALL LOAD_LOW
    CALL TRANSFORM_CHAR
    CALL WRITE_CHAR
    CMP STOP_CHAR
    BEQ EXIT
    CALL ADJUST_CURRENT_ADDR_DEC
    
EVEN_CHAR_LOAD:
    CALL LOAD_HIGH
    CALL TRANSFORM_CHAR
    CALL WRITE_CHAR
    CMP STOP_CHAR
    BEQ EXIT
    JUMP ODD_CHAR_LOAD

EXIT:
    HLT

TRANSFORM_CHAR:
    ADD #0x30
    RET

ADJUST_CURRENT_ADDR_INC:
    LD (CURRENT_ADDR)+
    RET

ADJUST_CURRENT_ADDR_DEC:
    LD -(CURRENT_ADDR)
    RET

STORE_HIGH: ; Сохранить верхнюю часть
    SWAB
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_LOW
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

STORE_LOW: ; Сохранить нижнюю часть
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

READ_CHAR: ; returns AC 8 bit char segment
    CALL WAIT_DEVICE_READY_9
    CLA
    IN 0x1C
    RET

LOAD_HIGH:
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    SWAB
    RET

LOAD_LOW:
    LD (CURRENT_ADDR)
    AND MASK_LOW
    RET

WRITE_CHAR:
    CALL WAIT_DEVICE_READY_5
    OUT 0xC
    RET

WAIT_DEVICE_READY_5:
    PUSH
NOT_READY_5:
    IN 0xD
    AND #0x40
    BEQ NOT_READY_5
    POP
    RET

WAIT_DEVICE_READY_9:
    PUSH
NOT_READY_9:
    IN 0x1D
    AND #0x40
    BEQ NOT_READY_9
    POP
    RET

START_ADDR: WORD 0x56A ; Адрес начала
CURRENT_ADDR: WORD ? ; Адрес текущей ячейки
STOP_CHAR: WORD 0x0000 ; Стоп-символ
MASK_HIGH: WORD 0xFF00
MASK_LOW: WORD 0x00FF

=======================

ORG 0x47B
START:
    LD START_ADDR
    ST CURRENT_ADDR

    LD STOP_CHAR
    CALL STORE_LOW
    JUMP EVEN_CHAR

ODD_CHAR:
    CALL READ_CHAR
;    CMP #10
;    BGE ODD_CHAR
    CALL STORE_LOW
    CMP STOP_CHAR
    BEQ EVEN_CHAR_LOAD ;

EVEN_CHAR:
    CALL READ_CHAR
;    CMP #10
;    BGE EVEN_CHAR
    CALL STORE_HIGH
    CMP STOP_CHAR
    BEQ ODD_CHAR_LOAD 
    CALL ADJUST_CURRENT_ADDR_INC
    JUMP ODD_CHAR

ODD_CHAR_LOAD:
    CALL LOAD_LOW
    CMP STOP_CHAR
    BEQ EXIT
    CALL TRANSFORM_CHAR
    CALL WRITE_CHAR
    CALL ADJUST_CURRENT_ADDR_DEC

EVEN_CHAR_LOAD:
    CALL LOAD_HIGH
    CMP STOP_CHAR
    BEQ EXIT
    CALL TRANSFORM_CHAR
    CALL WRITE_CHAR
    JUMP ODD_CHAR_LOAD

EXIT:
    HLT

TRANSFORM_CHAR:
    CMP CHAR_MINUS
    BEQ SET_CHAR_MINUS
    CMP CHAR_PLUS
    BEQ SET_CHAR_PLUS
    CMP CHAR_SLASH
    BEQ SET_CHAR_SLASH
    CMP CHAR_STAR
    BEQ SET_CHAR_STAR
    CMP CHAR_DOT
    BEQ SET_CHAR_DOT
    CMP CHAR_EQUALS
    BEQ SET_CHAR_EQUALS
    ADD #0x30
    RET

SET_CHAR_MINUS:
    LD #0x2D
    RET
    
SET_CHAR_PLUS:
    LD #0x2B
    RET

SET_CHAR_SLASH:
    LD #0x2F
    RET

SET_CHAR_STAR:
    LD #0x2A
    RET

SET_CHAR_DOT:
    LD #0x2E
    RET

SET_CHAR_EQUALS:
    LD #0x3D
    RET


ADJUST_CURRENT_ADDR_INC:
    LD (CURRENT_ADDR)+
    RET

ADJUST_CURRENT_ADDR_DEC:
    LD -(CURRENT_ADDR)
    RET

STORE_HIGH: ; Сохранить верхнюю часть
    SWAB
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_LOW
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

STORE_LOW: ; Сохранить нижнюю часть
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

READ_CHAR: ; returns AC 8 bit char segment
    CALL WAIT_DEVICE_READY_9
    CLA
    IN 0x1C
    RET

LOAD_HIGH:
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    SWAB
    RET

LOAD_LOW:
    LD (CURRENT_ADDR)
    AND MASK_LOW
    RET

WRITE_CHAR:
    CALL WAIT_DEVICE_READY_5
    OUT 0xC
    RET

WAIT_DEVICE_READY_5:
    PUSH
NOT_READY_5:
    IN 0xD
    AND #0x40
    BEQ NOT_READY_5
    POP
    RET

WAIT_DEVICE_READY_9:
    PUSH
NOT_READY_9:
    IN 0x1D
    AND #0x40
    BEQ NOT_READY_9
    POP
    RET

START_ADDR: WORD 0x56A ; Адрес начала
CURRENT_ADDR: WORD ? ; Адрес текущей ячейки
STOP_CHAR: WORD 0x0000 ; Стоп-символ
MASK_HIGH: WORD 0xFF00
MASK_LOW: WORD 0x00FF

CHAR_MINUS: WORD 0x000A
CHAR_PLUS: WORD 0x000B
CHAR_SLASH: WORD 0x000C
CHAR_STAR: WORD 0x000D
CHAR_DOT: WORD 0x000E
CHAR_EQUALS: WORD 0x000F


================

ORG 0x47B
START:
    LD START_ADDR
    ST CURRENT_ADDR

    LD STOP_CHAR
    CALL STORE_LOW
    JUMP EVEN_CHAR

ODD_CHAR:
    CALL READ_CHAR
    CALL STORE_LOW
    CMP STOP_CHAR
    BEQ EVEN_CHAR_LOAD

EVEN_CHAR:
    CALL READ_CHAR
    CALL STORE_HIGH
    CMP STOP_CHAR
    BEQ ODD_CHAR_LOAD 
    CALL ADJUST_CURRENT_ADDR_INC
    JUMP ODD_CHAR

ODD_CHAR_LOAD:
    CALL LOAD_LOW
    CMP STOP_CHAR
    BEQ EXIT
    CALL TRANSFORM_CHAR
    CALL WRITE_CHAR

EVEN_CHAR_LOAD:
    CALL ADJUST_CURRENT_ADDR_DEC
    CALL LOAD_HIGH
    CMP STOP_CHAR
    BEQ EXIT
    CALL TRANSFORM_CHAR
    CALL WRITE_CHAR
    JUMP ODD_CHAR_LOAD

EXIT:
    HLT
    JUMP START

TRANSFORM_CHAR:
    CMP CHAR_MINUS
    BEQ SET_CHAR_MINUS
    CMP CHAR_PLUS
    BEQ SET_CHAR_PLUS
    CMP CHAR_SLASH
    BEQ SET_CHAR_SLASH
    CMP CHAR_STAR
    BEQ SET_CHAR_STAR
    CMP CHAR_DOT
    BEQ SET_CHAR_DOT
    CMP CHAR_EQUALS
    BEQ SET_CHAR_EQUALS
    ADD #0x30
    RET

SET_CHAR_MINUS:
    LD #0x2D
    RET
    
SET_CHAR_PLUS:
    LD #0x2B
    RET

SET_CHAR_SLASH:
    LD #0x2F
    RET

SET_CHAR_STAR:
    LD #0x2A
    RET

SET_CHAR_DOT:
    LD #0x2E
    RET

SET_CHAR_EQUALS:
    LD #0x3D
    RET

ADJUST_CURRENT_ADDR_INC:
    LD (CURRENT_ADDR)+
    RET

ADJUST_CURRENT_ADDR_DEC:
    LD -(CURRENT_ADDR)
    RET

STORE_HIGH: ; Сохранить верхнюю часть
    SWAB
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_LOW
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

STORE_LOW: ; Сохранить нижнюю часть
    PUSH
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    OR &0
    ST (CURRENT_ADDR)
    POP
    RET

READ_CHAR: ; returns AC 8 bit char segment
    CALL WAIT_DEVICE_READY_9
    CLA
    IN 0x1C
    RET

LOAD_HIGH:
    LD (CURRENT_ADDR)
    AND MASK_HIGH
    SWAB
    RET

LOAD_LOW:
    LD (CURRENT_ADDR)
    AND MASK_LOW
    RET

WRITE_CHAR:
    CALL WAIT_DEVICE_READY_5
    OUT 0xC
    RET

WAIT_DEVICE_READY_5:
    PUSH
NOT_READY_5:
    IN 0xD
    AND #0x40
    BEQ NOT_READY_5
    POP
    RET

WAIT_DEVICE_READY_9:
    PUSH
NOT_READY_9:
    IN 0x1D
    AND #0x40
    BEQ NOT_READY_9
    POP
    RET

START_ADDR: WORD 0x56A ; Адрес начала
CURRENT_ADDR: WORD ? ; Адрес текущей ячейки
STOP_CHAR: WORD 0x0000 ; Стоп-символ
MASK_HIGH: WORD 0xFF00
MASK_LOW: WORD 0x00FF

CHAR_MINUS: WORD 0x000A
CHAR_PLUS: WORD 0x000B
CHAR_SLASH: WORD 0x000C
CHAR_STAR: WORD 0x000D
CHAR_DOT: WORD 0x000E
CHAR_EQUALS: WORD 0x000F